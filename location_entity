use role sysadmin;
use warehouse adhoc_virtual;
use database sandbox;
use schema stage_sch;


select 
    t.$1::text as location_id,
    t.$2::text as city,
    t.$3::text as state,
    t.$4::text as zipcode,
    t.$5::text as activeflag,
    t.$6::text as createddate,
    t.$7::text as modifieddate,
    --audit columns for tracking and debugging
    metadata$filename as _stg_file_name,
    metadata$file_last_modified as _stg_file_load_ts,
    metadata$file_content_key as _stg_file_md5,
    current_timestamp as copy_data_ts
    
from @stage_sch.stage_sch_csv_stg/initial/location/location-5rows.csv
(file_format=>'stage_sch.stage_sch_csv_file_format') t;
---------------------------------------------------------------------------------------------stage
drop table stage_sch.location

create table stage_sch.location(
    locationid text,
    city text,
    state text,
    zipcode text,
    activeflag text,
    createddate text,
    modifieddate text,
    _stg_file_name text,
    _stg_file_load_ts timestamp,
    _stg_file_md5 text,
    _copy_data_ts timestamp default current_timestamp
)

--create stream to capture any change in the above table

create or replace stream stage_sch.location_stm
on table stage_sch.location
append_only=true
--captures only insert operations


select * from stage_sch.location;


copy into stage_sch.location(locationid,city,
    state,
    zipcode,
    activeflag,
    createddate,
    modifieddate,
    _stg_file_name,
    _stg_file_load_ts,
    _stg_file_md5,
    _copy_data_ts)
from 
(
select 
    t.$1::text as locationid,
    t.$2::text as city,
    t.$3::text as state,
    t.$4::text as zipcode,
    t.$5::text as activeflag,
    t.$6::text as createddate,
    t.$7::text as modifieddate,
    --audit columns for tracking and debugging
    metadata$filename as _stg_file_name,
    metadata$file_last_modified as _stg_file_load_ts,
    metadata$file_content_key as _stg_file_md5,
    current_timestamp as copy_data_ts
    from @stage_sch.stage_sch_csv_stg/initial/location t
)
file_format=(format_name='stage_sch.stage_sch_csv_file_format')
on_error= abort_statement;

select * from stage_sch.location;

select * from stage_sch.location_stm;

---------------------------------------------------------------------------------------------------------------clean
use schema clean_sch;

drop table clean_sch.restaurant_location;

create or replace table clean_sch.restaurant_location(
    restaurant_location_sk number autoincrement primary key,
    location_id number not null unique,
    city string(300) not null,
    state string(100) not null,
    state_code string(2) not null,
    is_union_territory boolean not null default false,
    capital_city_flag boolean not null default false,
    city_tier text(6),
    zip_code string(10) not null,
    active_flag string(10) not null,
    created_ts timestamp_tz not null,
    modified_ts timestamp_tz,
    _stg_file_name string,
    _stg_file_load_ts timestamp_ntz,
    _stg_file_md5 string,
    _copy_data_ts timestamp default current_timestamp
)


create or replace stream clean_sch.restaurant_location_stm
on table clean_sch.restaurant_location


select * from clean_sch.restaurant_location

select * from clean_sch.restaurant_location_stm


MERGE INTO clean_sch.restaurant_location AS target
USING (
    SELECT 
        CAST(LocationID AS NUMBER) AS Location_ID,
        CAST(City AS STRING) AS City,
        CASE 
            WHEN CAST(State AS STRING) = 'Delhi' THEN 'New Delhi'
            ELSE CAST(State AS STRING)
        END AS State,
        -- State Code Mapping
        CASE 
            WHEN State = 'Delhi' THEN 'DL'
            WHEN State = 'Maharashtra' THEN 'MH'
            WHEN State = 'Uttar Pradesh' THEN 'UP'
            WHEN State = 'Gujarat' THEN 'GJ'
            WHEN State = 'Rajasthan' THEN 'RJ'
            WHEN State = 'Kerala' THEN 'KL'
            WHEN State = 'Punjab' THEN 'PB'
            WHEN State = 'Karnataka' THEN 'KA'
            WHEN State = 'Madhya Pradesh' THEN 'MP'
            WHEN State = 'Odisha' THEN 'OR'
            WHEN State = 'Chandigarh' THEN 'CH'
            WHEN State = 'West Bengal' THEN 'WB'
            WHEN State = 'Sikkim' THEN 'SK'
            WHEN State = 'Andhra Pradesh' THEN 'AP'
            WHEN State = 'Assam' THEN 'AS'
            WHEN State = 'Jammu and Kashmir' THEN 'JK'
            WHEN State = 'Puducherry' THEN 'PY'
            WHEN State = 'Uttarakhand' THEN 'UK'
            WHEN State = 'Himachal Pradesh' THEN 'HP'
            WHEN State = 'Tamil Nadu' THEN 'TN'
            WHEN State = 'Goa' THEN 'GA'
            WHEN State = 'Telangana' THEN 'TG'
            WHEN State = 'Chhattisgarh' THEN 'CG'
            WHEN State = 'Jharkhand' THEN 'JH'
            WHEN State = 'Bihar' THEN 'BR'
            ELSE NULL
        END AS state_code,
        CASE 
            WHEN State IN ('Delhi', 'Chandigarh', 'Puducherry', 'Jammu and Kashmir') THEN 'Y'
            ELSE 'N'
        END AS is_union_territory,
        CASE 
            WHEN (State = 'Delhi' AND City = 'New Delhi') THEN TRUE
            WHEN (State = 'Maharashtra' AND City = 'Mumbai') THEN TRUE
            -- Other conditions for capital cities
            ELSE FALSE
        END AS capital_city_flag,
        CASE 
            WHEN City IN ('Mumbai', 'Delhi', 'Bengaluru', 'Hyderabad', 'Chennai', 'Kolkata', 'Pune', 'Ahmedabad') THEN 'Tier-1'
            WHEN City IN ('Jaipur', 'Lucknow', 'Kanpur', 'Nagpur', 'Indore', 'Bhopal', 'Patna', 'Vadodara', 'Coimbatore', 
                          'Ludhiana', 'Agra', 'Nashik', 'Ranchi', 'Meerut', 'Raipur', 'Guwahati', 'Chandigarh') THEN 'Tier-2'
            ELSE 'Tier-3'
        END AS city_tier,
        CAST(ZipCode AS STRING) AS Zip_Code,
        CAST(ActiveFlag AS STRING) AS Active_Flag,
        TO_TIMESTAMP_TZ(CreatedDate, 'YYYY-MM-DD HH24:MI:SS') AS created_ts,
        TO_TIMESTAMP_TZ(ModifiedDate, 'YYYY-MM-DD HH24:MI:SS') AS modified_ts,
        _stg_file_name,
        _stg_file_load_ts,
        _stg_file_md5,
        CURRENT_TIMESTAMP AS _copy_data_ts
    FROM stage_sch.location_stm
) AS source
ON target.Location_ID = source.Location_ID
WHEN MATCHED AND (
    target.City != source.City OR
    target.State != source.State OR
    target.state_code != source.state_code OR
    target.is_union_territory != source.is_union_territory OR
    target.capital_city_flag != source.capital_city_flag OR
    target.city_tier != source.city_tier OR
    target.Zip_Code != source.Zip_Code OR
    target.Active_Flag != source.Active_Flag OR
    target.modified_ts != source.modified_ts
) THEN 
    UPDATE SET 
        target.City = source.City,
        target.State = source.State,
        target.state_code = source.state_code,
        target.is_union_territory = source.is_union_territory,
        target.capital_city_flag = source.capital_city_flag,
        target.city_tier = source.city_tier,
        target.Zip_Code = source.Zip_Code,
        target.Active_Flag = source.Active_Flag,
        target.modified_ts = source.modified_ts,
        target._stg_file_name = source._stg_file_name,
        target._stg_file_load_ts = source._stg_file_load_ts,
        target._stg_file_md5 = source._stg_file_md5,
        target._copy_data_ts = source._copy_data_ts
WHEN NOT MATCHED THEN
    INSERT (
        Location_ID,
        City,
        State,
        state_code,
        is_union_territory,
        capital_city_flag,
        city_tier,
        Zip_Code,
        Active_Flag,
        created_ts,
        modified_ts,
        _stg_file_name,
        _stg_file_load_ts,
        _stg_file_md5,
        _copy_data_ts
    )
    VALUES (
        source.Location_ID,
        source.City,
        source.State,
        source.state_code,
        source.is_union_territory,
        source.capital_city_flag,
        source.city_tier,
        source.Zip_Code,
        source.Active_Flag,
        source.created_ts,
        source.modified_ts,
        source._stg_file_name,
        source._stg_file_load_ts,
        source._stg_file_md5,
        source._copy_data_ts
    );


    
MERGE INTO clean_sch.restaurant_location as target
using (
    SELECT 
        cast(locationID as number) as location_id,
        cast(city as string) as city,
        case 
            when cast(state as string)='Delhi' Then 'New Delhi'
            else cast(state as string)
        end as State,
        --state code mapping
        case
            when state='Delhi' then 'DL'
            when state='Maharashtra' then 'MH'
            when state='Utter Pradesh' then 'UP'
            when state='Gujarat' then 'GJ'
            when state='Rajasthan' then 'RJ'
            when state='Kerala' then 'KL'
            when state='Punjab' then 'PB'
            when state='Karnataka' then 'KA'
            when state='Madhya Pradesh' then 'MP'
            when state='Odisha' then 'OR'
            when state='Chandigarh' then 'CH'
            when state='West Bengal' then 'WB'
            when state='Goa' then 'GA'
            when state='Telangana' then 'TG'
            when state='Chattisgarh' then 'CG'
            when state='Jharkhand' then 'JH'
            when state='Bihar' then 'BR'
            when state='Sikkim' then 'SK'
            when state='Andhra Pradesh' then 'AP'
            when state='Assam' then 'AS'
            when state='Jammu and Kashmir' then 'JK'
            when state='Puducherry' then 'PY'
            when state='Uttarakhand' then 'UK'
            when state='Tamil Nade' then 'TN'
            when state='Himachal Pradesh' then 'HP'
            else null
        end as state_code,
        case
            when state in ('Delhi','Chandigarh','Jammu and Kashmir','Puducherry') then 'Y'
            else 'N'
        end as is_union_territory,
        case
            when (state='Delhi' and city='New Delhi') then TRUE
            when (state='Maharashatra' and city='Mumbai') then TRUE
            when (state='Telangana' and city='Hyderabad') then TRUE
            when (state='Assam' and city='Dispur') then TRUE
            when (state='Bihar' and city='Patna') then TRUE
            when (state='Arunachal Pradesh' and city='Itanagar') then TRUE
            when (state='Chattisgarh' and city='Raipur') then TRUE
            when (state='Punjab' and city='Chandigarh') then TRUE
            when (state='Tamil Nadu' and city='Chennai') then TRUE
            when (state='Karnataka' and city='Bengaluru') then TRUE
            when (state='Kerala' and city='Trivandrum') then TRUE
            when (state='Andhra Pradesh' and city='Amaravathi') then TRUE
            when (state='Orissa' and city='Bhubhaneswar') then TRUE
            when (state='Madhya Pradesh' and city='Bhopal') then TRUE            
            when (state='Gujarat' and city='Gandhi Nagar') then TRUE
            when (state='Goa' and city='Panaji') then TRUE
            when (state='Sikkim' and city='Gangtok') then TRUE
            else false
        end as capital_city_flag,
        case
            when city in ('Mumbai','Delhi','Bengaluru','Hyderabad','Chennai','Kolkata','Pune','Ahmedabad') then 'Tier-1'
            when city in ('Jaipur','Lucknow','Kanpur','Nagpur','Indore','Bhopal','Patna','Vadodara','Coimbatore','Ludhiana','Agra','Nashik','Ranchi','Meerut','Guwahati','Raipur','Chandigarh') then 'Tier-2'
            else 'Tier-3'
        end as city_tier,
        cast(Zipcode as string) as zip_code,
        cast(ActiveFlag as string) as Active_flag,
        TO_TIMESTAMP_TZ(createdDate, 'YYYY-MM-DD HH24 :MI :SS') as created_ts,
        TO_TIMESTAMP_TZ(modifiedDate, 'YYYY-MM-DD HH24 :MI :SS') as modified_ts,
        _stg_file_name,
        _stg_file_load_ts,
        _stg_file_md5,
        current_timestamp as _copy_data_ts
    from stage_sch.location_stm
    ) as source
    on target.location_id = source.location_id
    when matched and (
        target.City!= source.city or
        target.State!=source.state or
        target.state_code != source.state_code or
        target.is_union_territory != source.is_union_territory or
        target.capital_city_flag != source.capital_city_flag or
        target.city_tier!=source.city_tier or
        target.Zip_code!=source.Zip_code or
        target.Active_Flag!=source.Active_Flag or
        target.modified_ts!=source.modified_ts
    ) then
        update set
            target.City = source.city,
            target.State =source.state,
            target.state_code = source.state_code,
            target.is_union_territory = source.is_union_territory,
            target.capital_city_flag=source.capital_city_flag,
            target.city_tier=source.city_tier,
            target.Zip_code=source.Zip_code,
            target.Active_Flag=source.Active_Flag,
            target.modified_ts=source.modified_ts,
            target._stg_file_name=source._stg_file_name,
            target._stg_file_load_ts=source._stg_file_load_ts,
            target._stg_file_md5 = source._stg_file_md5,
            target._copy_data_ts = source._copy_data_ts
    when not matched then
        insert(
        location_id,
        city,
        state,
        state_code,
        is_union_territory,
        capital_city_flag,
        city_tier,
        Zip_code,
        Active_Flag,
        created_ts,
        modified_ts,
        _stg_file_name,
        _stg_file_load_ts,
        _stg_file_md5,
        _copy_data_ts
        )
        values(
        source.location_id,
        source.city,
        source.state,
        source.state_code,
        source.is_union_territory,
        source.capital_city_flag,
        source.city_tier,
        source.Zip_code,
        source.Active_Flag,
        source.created_ts,
        source.modified_ts,
        source._stg_file_name,
        source._stg_file_load_ts,
        source._stg_file_md5,
        source._copy_data_ts
        )


select * from clean_sch.restaurant_location

select max(restaurant_location_sk) from clean_sch.restaurant_location


select * from clean_sch.restaurant_location_stm
-----------------------------------------------------------------------------------------------------consumption
drop table consumption_sch.restaurant_location_dim


create or replace table consumption_sch.restaurant_location_dim(
    restaurant_location_hk number primary key,
    location_id number(38,0) not null,
    city string(300) not null,
    state string(100) not null,
    state_code string(2) not null,
    is_union_territory boolean not null default false,
    capital_city_flag boolean not null default false,
    city_tier varchar(6),
    zip_code varchar(10) not null,
    active_flag varchar(10) not null,
    eff_start_dt timestamp_tz(9) not null,
    eff_end_dt timestamp_tz(9),
    current_flag boolean not null default true
)



select * from consumption_sch.restaurant_location_dim


merge into 
    consumption_sch.restaurant_location_dim as target
using
    clean_sch.restaurant_location_stm as source
on
    target.location_id=source.location_id and 
    target.active_flag=source.active_flag
when matched
    and source.metadata$action = 'DELETE' 
    and source.metadata$isupdate = 'TRUE'
then
update set
    target.eff_end_dt = current_timestamp(),
    target.current_flag= false
when not matched 
    and source.metadata$action = 'INSERT' and source.metadata$isupdate='TRUE'
then
insert(
restaurant_location_hk,
location_id,
    city,
    state,
    state_code,
    is_union_territory,
    capital_city_flag,
    city_tier,
    zip_code,
    active_flag,
    eff_start_dt,
    eff_end_dt,
    current_flag
) values(
hash(SHA1_hex(concat(source.city,source.state,source.state_code,source.zip_code))),
source.location_id,
    source.city,
    source.state,
    source.state_code,
    source.is_union_territory,
    source.capital_city_flag,
    source.city_tier,
    source.zip_code,
    source.active_flag,
    current_timestamp(),
    null,
    true
)
WHEN NOT MATCHED AND 
    source.METADATA$ACTION = 'INSERT' and source.METADATA$ISUPDATE = 'FALSE' THEN
    -- Insert new record with current data and new effective start date
    INSERT (
        RESTAURANT_LOCATION_HK,
        LOCATION_ID,
        CITY,
        STATE,
        STATE_CODE,
        IS_UNION_TERRITORY,
        CAPITAL_CITY_FLAG,
        CITY_TIER,
        ZIP_CODE,
        ACTIVE_FLAG,
        EFF_START_DT,
        EFF_END_DT,
        CURRENT_FLAG
    )
    VALUES (
        hash(SHA1_hex(CONCAT(source.CITY, source.STATE, source.STATE_CODE, source.ZIP_CODE))),
        source.LOCATION_ID,
        source.CITY,
        source.STATE,
        source.STATE_CODE,
        source.IS_UNION_TERRITORY,
        source.CAPITAL_CITY_FLAG,
        source.CITY_TIER,
        source.ZIP_CODE,
        source.ACTIVE_FLAG,
        CURRENT_TIMESTAMP(),
        NULL,
        TRUE
    );



select * from consumption_sch.restaurant_location_dim order by city


-----------------------------------------------------------part -2 - loading delta data


list @stage_sch.stage_sch_csv_stg/delta/location/;


select 
    t.$1::text as location_id,
    t.$2::text as city,
    t.$3::text as state,
    t.$4::text as zipcode,
    t.$5::text as activeflag,
    t.$6::text as createddate,
    t.$7::text as modifieddate,
    --audit columns for tracking and debugging
    metadata$filename as _stg_file_name,
    metadata$file_last_modified as _stg_file_load_ts,
    metadata$file_content_key as _stg_file_md5,
    current_timestamp as copy_data_ts
from @stage_sch.stage_sch_csv_stg/delta/location/delta-day02-2rows-update.csv
(file_format=>'stage_sch.stage_sch_csv_file_format') t;
---------------------------------------------------------------------------------------------stage


select * from stage_sch.location;


copy into stage_sch.location(locationid,city,
    state,
    zipcode,
    activeflag,
    createddate,
    modifieddate,
    _stg_file_name,
    _stg_file_load_ts,
    _stg_file_md5,
    _copy_data_ts)
from 
(
select 
    t.$1::text as locationid,
    t.$2::text as city,
    t.$3::text as state,
    t.$4::text as zipcode,
    t.$5::text as activeflag,
    t.$6::text as createddate,
    t.$7::text as modifieddate,
    --audit columns for tracking and debugging
    metadata$filename as _stg_file_name,
    metadata$file_last_modified as _stg_file_load_ts,
    metadata$file_content_key as _stg_file_md5,
    current_timestamp as copy_data_ts
    from @stage_sch.stage_sch_csv_stg/delta/location/delta-day02-2rows-update.csv t
)
file_format=(format_name='stage_sch.stage_sch_csv_file_format')
on_error= abort_statement;

select * from stage_sch.location;

select * from stage_sch.location_stm;

select * from consumption_sch.restaurant_location_dim;
